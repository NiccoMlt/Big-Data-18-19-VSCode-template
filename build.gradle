/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Scala library project to get you started.
 * For more details take a look at the Scala plugin chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.2.1/userguide/scala_plugin.html
 */

plugins {
    id 'scala'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
}

group 'template.spark'
version '0.0.1'

sourceCompatibility = 1.7
targetCompatibility = 1.7

configurations {
    provided
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

dependencies {
    implementation "org.scala-lang:scala-library:$scalaVersion"
    implementation "org.scala-lang:scala-reflect:$scalaVersion"
    implementation "org.scala-lang:scala-compiler:$scalaVersion"

    testImplementation "junit:junit:$jUnit4Version"
    testImplementation "org.scalatest:scalatest_$scalaMinorVersion:$scalaTestVersion"

    testRuntimeOnly "org.scala-lang.modules:scala-xml_$scalaMinorVersion:$scalaXmlVersion"

    implementation "org.apache.spark:spark-mllib_$scalaMinorVersion:$sparkVersion"
    implementation "org.apache.spark:spark-sql_$scalaMinorVersion:$sparkVersion"
    implementation "org.apache.spark:spark-streaming-flume-assembly_$scalaMinorVersion:$sparkVersion"
    implementation "org.apache.spark:spark-graphx_$scalaMinorVersion:$sparkVersion"
    implementation "org.apache.spark:spark-launcher_$scalaMinorVersion:$sparkVersion"
    implementation "org.apache.spark:spark-catalyst_$scalaMinorVersion:$sparkVersion"
    implementation "org.apache.spark:spark-streaming_$scalaMinorVersion:$sparkVersion"
    implementation "org.apache.spark:spark-core_$scalaMinorVersion:$sparkVersion"
}

task run(type: JavaExec, dependsOn: classes) {
    main = mainClassFile
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

jar {
    classifier = 'all'
    manifest {
        attributes 'Implementation-Title': title,
                'Implementation-Version': version,
                'Main-Class': mainClassFile
    }
    include{sourceSets.main.output.classesDir}
    zip64 true
}

shadowJar {
    classifier = 'shadow'
    append 'reference.conf'
    dependencies {

    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
